openapi: 3.0.3
info:
  title: Swagger DrugStore - OpenAPI 3.0
  description: |-
    API Documentation for DrugStore. You can find out more about Swagger at [https://swagger.io](https://swagger.io).
  contact:
    email: franc1sc0.sv.xd@gmail.com
  version: 1.0.0
tags:
  - name: auth
    description: Authentication and user registration
  - name: categories
    description: Operations related to categories
  - name: products
    description: Operations related to products
  - name: users
    description: Operations related to users and managers
  - name: carts
    description: Operations related to shopping cart
  - name: notifications
    description: Operations related to notifications
  - name: likes
    description: Operations related to product likes
  - name: orders
    description: Operations related to orders and payment
  - name: stripe
    description: Operations related to stripe
paths:
  # auth endpoints
  /auth/login:
    post:
      tags:
        - auth
      summary: User login
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginSchema'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/register:
    post:
      tags:
        - auth
      summary: User registration
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterSchema'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/forget:
    post:
      tags:
        - auth
      summary: Generate token for password reset
      operationId: generateResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForgetSchema'
      responses:
        '200':
          description: Email sended successfully

  /auth/reset:
    post:
      tags:
        - auth
      summary: Resert password reset
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResetSchema'
      responses:
        '200':
          description: Password change susccesfully

  # categories endpoints
  /categories:
    post:
      tags:
        - categories
      summary: Create a new category (manager)
      operationId: createCategory
      security:
        - authentication: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

    get:
      tags:
        - categories
      summary: Get all categories
      operationId: getCategories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

  /categories/{id}:
    get:
      tags:
        - categories
      summary: Get category by ID
      operationId: getCategoryById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to retrieve
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

    patch:
      tags:
        - categories
      summary: Update category details (manager)
      operationId: updateCategoryById
      security:
        - authentication: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdate'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

    delete:
      tags:
        - categories
      summary: Delete a category (manager)
      operationId: deleteCategoryById
      security:
        - authentication: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the category to delete
      responses:
        '200':
          description: Categorie deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'

  # products endpoints
  /products:
    post:
      tags:
        - products
      summary: Create a new product (manager)
      operationId: createProduct
      security:
        - authentication: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateSchema'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    get:
      tags:
        - products
      summary: Get all products
      operationId: getProducts
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      tags:
        - products
      summary: Get a product by ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    patch:
      tags:
        - products
      summary: Update product details (manager)
      operationId: updateProduct
      security:
        - authentication: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateSchema'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    delete:
      tags:
        - products
      summary: Delete a product (manager)
      operationId: deleteProduct
      security:
        - authentication: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'

  /products/{id}/images:
    patch:
      tags:
        - products
      summary: Update product images (manager)
      operationId: updateProductImages
      security:
        - authentication: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductImageUpload'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/search:
    get:
      tags:
        - products
      summary: Search for products
      operationId: searchProducts
      parameters:
        - name: query
          in: query
          required: true
          description: The search query to find products
          schema:
            type: string
      responses:
        '200':
          description: List of matching products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - Invalid query parameter

  # users endpoints
  /users:
    get:
      tags:
        - users
      summary: Get all users
      operationId: getUsers
      security:
        - authentication: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - authentication: []
      responses:
        '200':
          description: List of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags:
        - users
      summary: Edit user data
      operationId: editUserData
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - authentication: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEditSchema'
      responses:
        '201':
          description: action successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/managers:
    post:
      tags:
        - users
      summary: Add a new manager (admin)
      operationId: addManager
      security:
        - authentication: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterSchema'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}/status:
    patch:
      tags:
        - users
      summary: Disable or enable a account
      operationId: disableAccount
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      security:
        - authentication: []
      responses:
        '201':
          description: Account disabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/managers/{id}:
    delete:
      tags:
        - users
      summary: Delete a manager (admin)
      operationId: deleteManager
      security:
        - authentication: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Manager deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'

  # carts endpoints
  /carts:
    get:
      tags:
        - carts
      summary: Get user cart
      operationId: getCart
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

  /carts/products/{id}:
    put:
      tags:
        - carts
      summary: Add or modify product in the cart
      operationId: AddModifyCartProduct
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddItemToCartSchema'

    delete:
      tags:
        - carts
      summary: Delete a product in a cart
      operationId: deleteProduct
      security:
        - authentication: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'

  # notifications endpoints
  /notifications:
    get:
      tags:
        - notifications
      summary: Get all notifications for the user
      operationId: getNotifications
      security:
        - authentication: []
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'

    delete:
      tags:
        - notifications
      summary: Delete all notifications for the user
      operationId: deleteNotifications
      security:
        - authentication: []
      responses:
        '200':
          description: Notifications deleted successfully

  /notifications/${id}:
    delete:
      tags:
        - notifications
      summary: Delete a notification
      operationId: deleteNotification
      security:
        - authentication: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
  # likes endpoints
  /likes:
    get:
      tags:
        - likes
      summary: Get all liked products for the user
      operationId: getLikedProducts
      security:
        - authentication: []
      responses:
        '200':
          description: List of liked products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Like'

  /likes/{id}:
    put:
      tags:
        - likes
      summary: Dislike or Like a product
      operationId: modifyProductStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the product to dislike
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModifyLikeSchema'

      responses:
        '200':
          description: Product disliked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'

  # orders endpoints
  /orders:
    post:
      tags:
        - orders
      summary: Generate a new order
      operationId: generateOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrdenSchama'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

    get:
      tags:
        - orders
      summary: Get all orders for the user
      operationId: getOrders
      security:
        - authentication: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Get the status of a specific order
      operationId: getOrderStatus
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: ID of the order to retrieve status
      responses:
        '200':
          description: Order status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

    patch:
      tags:
        - orders
      summary: Update an order
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchOrderStatus'
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /webhook/stripe:
    post:
      summary: Stripe Webhook Event
      tags:
        - stripe
      description: Endpoint to receive Stripe Webhook Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StripeWebhookEvent'
      responses:
        '200':
          description: Event received successfully
        '400':
          description: Invalid event data

components:
  schemas:
    DeleteResponse:
      type: object
      properties:
        message:
          type: string

    # Enums
    Role:
      type: string
      enum:
        - ADMIN
        - MANAGER
        - CLIENT

    OrderStatus:
      type: string
      enum:
        - PENDING
        - PAID
        - COMPLETED
        - CANCELED

    StripePaymentStatus:
      type: string
      enum:
        - requires_payment_method
        - requires_confirmation
        - processing
        - succeeded
        - failed
        - canceled

    ShipmentStatus:
      type: string
      enum:
        - PENDING
        - PROCESSING
        - SHIPPED
        - DELIVERED
        - RETURNED
        - CANCELED

    NotificationType:
      type: string
      enum:
        - ORDER_STATUS_UPDATE
        - LOW_STOCK_ALERT
        - GENERAL

    # Auth schemas
    UserRegisterSchema:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string

    UserForgetSchema:
      type: object
      properties:
        email:
          type: string

    UserResetSchema:
      type: object
      properties:
        id_user:
          type: string
          format: uuid
        reset_token:
          type: string
          format: uuid
        new_password:
          type: string

    UserLoginSchema:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    UserEditSchema:
      type: object
      properties:
        name:
          type: string
        password:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        role:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Categories schemas
    CategoryCreate:
      type: object
      properties:
        name:
          type: string
        parent_id:
          type: string
          format: uuid
        description:
          type: string
      required:
        - name

    CategoryUpdate:
      type: object
      properties:
        name:
          type: string
        parent_id:
          type: string
          format: uuid
        description:
          type: string

    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        parent_id:
          type: string
          format: uuid
        description:
          type: string

    # Products schemas
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductCreateSchema:
      type: object
      required:
        - name
        - price
        - stock
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer

    ProductUpdateSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer

    ProductImageUpload:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: The image file to upload
      required:
        - file

    ProductSearch:
      type: object
      properties:
        query:
          type: string

    #Likes Schemas
    Like:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        product:
          $ref: '#/components/schemas/CartItem'
        created_at:
          type: string
          format: date-time

    CreateModifyLikeSchema:
      type: object
      properties:
        like_status:
          format: boolean

    # Carts schemas
    Cart:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        cart_items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'

    AddItemToCartSchema:
      type: object
      properties:
        cart_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        quantity:
          type: number

    CartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        cart_id:
          type: string
          format: uuid
        quantity:
          type: integer
        product:
          $ref: '#/components/schemas/Product'

    # Orders schemas
    CreateOrdenSchama:
      type: object
      properties:
        cart_id:
          type: string

    PatchOrderStatus:
      type: object
      properties:
        payment_status:
          type: string

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        order_status:
          $ref: '#/components/schemas/OrderStatus'
        total:
          type: number
          format: float
        payment_id:
          type: string
          format: uuid
        paymentIntent:
          $ref: '#/components/schemas/PaymentIntent'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        quantity:
          type: integer
        price:
          type: number
          format: float

    # Notifications schemas
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/NotificationType'
        message:
          type: string
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time

    # Payments schemas
    PaymentIntent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        stripe_payment_id:
          type: string
        stripe_client_secret:
          type: string
        stripe_status:
          $ref: '#/components/schemas/StripePaymentStatus'
        stripe_amount:
          type: number
          format: float
        stripe_currency:
          type: string
        stripe_payment_method:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # Stripe
    StripeWebhookEvent:
      type: object
      properties:
        id:
          type: string
          example: evt_1NG8Du2eZvKYlo2CUI79vXWy
        object:
          type: string
          example: event
        api_version:
          type: string
          example: 2019-02-19
        created:
          type: integer
          example: 1686089970
        data:
          type: object
          properties:
            object:
              $ref: '#/components/schemas/SetupIntent'
        livemode:
          type: boolean
          example: false
        pending_webhooks:
          type: integer
          example: 0
        request:
          type: object
          properties:
            id:
              type: string
              nullable: true
            idempotency_key:
              type: string
              nullable: true
        type:
          type: string
          example: setup_intent.created

    SetupIntent:
      type: object
      properties:
        id:
          type: string
          example: seti_1NG8Du2eZvKYlo2C9XMqbR0x
        object:
          type: string
          example: setup_intent
        application:
          type: string
          nullable: true
        automatic_payment_methods:
          type: string
          nullable: true
        cancellation_reason:
          type: string
          nullable: true
        client_secret:
          type: string
          example: seti_1NG8Du2eZvKYlo2C9XMqbR0x_secret_O2CdhLwGFh2Aej7bCY7qp8jlIuyR8DJ
        created:
          type: integer
          example: 1686089970
        customer:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        flow_directions:
          type: string
          nullable: true
        last_setup_error:
          type: string
          nullable: true
        latest_attempt:
          type: string
          nullable: true
        livemode:
          type: boolean
          example: false
        mandate:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
        next_action:
          type: string
          nullable: true
        on_behalf_of:
          type: string
          nullable: true
        payment_method:
          type: string
          example: pm_1NG8Du2eZvKYlo2CYzzldNr7
        payment_method_options:
          type: object
          properties:
            acss_debit:
              type: object
              properties:
                currency:
                  type: string
                  example: cad
                mandate_options:
                  type: object
                  properties:
                    interval_description:
                      type: string
                      example: First day of every month
                    payment_schedule:
                      type: string
                      example: interval
                    transaction_type:
                      type: string
                      example: personal
                verification_method:
                  type: string
                  example: automatic
        payment_method_types:
          type: array
          items:
            type: string
          example: ['acss_debit']
        single_use_mandate:
          type: string
          nullable: true
        status:
          type: string
          example: requires_confirmation
        usage:
          type: string
          example: off_session
